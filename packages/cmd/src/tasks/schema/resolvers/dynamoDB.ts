import {
    ResolverTemplate,
    ResolverTemplates,
    ResolverMappingType,
} from "./types";
import {
    DataSource,
    DataSourceTemplate,
    DataSourceTemplates,
    DataSourceDynamoDBConfig,
} from "../dataSources/dataSources";
import {
    visit,
    parse,
    buildSchema,
    GraphQLField,
    GraphQLType,
    ObjectTypeDefinitionNode,
    StringValueNode,
    DocumentNode,
    GraphQLSchema,
    GraphQLNamedType,
} from "graphql";
import { Config } from "../../common/types";
import {
    Edge,
    EdgePrinciple,
} from "../schemaProcessing/steps/generateArtifacts/extractEdges";
const pkg = require("../../../../package.json");

import * as deleteGenerator from "./dynamoDB/delete";
import * as deleteManyGenerator from "./dynamoDB/delete";
import * as edgeGenerator from "./dynamoDB/edge";
import * as edgesGenerator from "./dynamoDB/edges";
import * as pluralGenerator from "./dynamoDB/plural";
import * as connectionGenerator from "./dynamoDB/connection";
import * as connectionPluralGenerator from "./dynamoDB/connectionPlural";
import * as queryGenerator from "./dynamoDB/query";
import * as updateGenerator from "./dynamoDB/update";
import * as updateManyGenerator from "./dynamoDB/updateMany";
import * as upsertGenerator from "./dynamoDB/upsert";

// $util.error($util.toJson($ctx))

/**
 * Generate a resolver template
 * @param options
 */
function generateDynamoDBResolverTemplate({
    dataSource,
    typeName,
    field,
    fieldName,
    fieldType,
    namedType,
    resolverType,
    edges,
}: {
    dataSource: DataSourceTemplate;
    typeName: string;
    field: string;
    fieldName: string;
    namedType: string;
    fieldType: GraphQLField<any, any, any>;
    resolverType: string;
    edges?: Edge[];
}): ResolverTemplate | any {
    const date = new Date();
    const headerString: string = `## Generated by ${pkg.name}
## Version: ${pkg.version}
## ${date.toISOString()}

## Uncomment for debugging $util.error($util.toJson$($ctx))

## This is an array of all the linnet system fields
#set($linnetFields = ["linnet:dataType","linnet:edge","linnet:namedType"])
`;
    return {
        dataSourceName: dataSource.name,
        typeName,
        fieldName,
        responseMappingTemplate: generateResponseTemplate({
            field,
            fieldName,
            fieldType,
            dataSource,
            namedType,
            resolverType,
            edges,
            headerString,
        }),
        requestMappingTemplate: generateRequestTemplate({
            field,
            fieldName,
            fieldType,
            namedType,
            dataSource,
            resolverType,
            edges,
            headerString,
        }),
    };
}

/**
 * Get the edge that matches the type.field
 * @param options
 */
function getEdgeForField({
    typeName,
    fieldName,
    edges,
}: {
    typeName: string;
    fieldName: string;
    edges: Edge[];
}): Edge | null {
    // console.log({ typeName, fieldName });
    if (Array.isArray(edges)) {
        const foundEdge = edges.find((edge: Edge) => {
            if (typeName === edge.typeName && fieldName === edge.field) {
                return true;
            }

            return false;
        });
        if (typeof foundEdge !== "undefined") {
            return foundEdge;
        }
    }
    // If we found nothing we return undefined
    return null;
}

/**
 * Generate DynamoDB request template
 * @param options
 */
function generateRequestTemplate({
    field,
    fieldName,
    fieldType,
    namedType,
    dataSource,
    resolverType,
    edges,
    headerString,
}: {
    field: string;

    fieldName: string;
    namedType: string;
    fieldType: GraphQLField<any, any, any>;
    dataSource: DataSourceTemplate;
    resolverType: string;
    edges?: Edge[];
    headerString: string;
}): string {
    switch (resolverType) {
        // [ Query ]--------------------------------------------------------------------------------
        case "query":
            return queryGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        case "connection":
            return connectionGenerator.generateRequestTemplate({
                field,
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        case "connectionPlural":
            return connectionPluralGenerator.generateRequestTemplate({
                field,
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });

        case "plural":
            return pluralGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });

        // [ Mutation ]-----------------------------------------------------------------------------
        // case "create":
        //     return createGenerator.generateRequestTemplate({
        //         fieldName,
        //         fieldType,
        //         namedType,
        //         dataSource,
        //         resolverType,
        //         edges,
        //         headerString,
        //     });
        // case "upsert":
        //     return upsertGenerator.generateRequestTemplate({
        //         fieldName,
        //         fieldType,
        //         namedType,
        //         dataSource,
        //         resolverType,
        //         edges,
        //         headerString,
        //     });
        case "update":
            return updateGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        case "updateMany":
            return updateManyGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        case "delete":
            return deleteGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        case "deleteMany":
            return deleteManyGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        // [ Other ]--------------------------------------------------------------------------------
        case "edge":
            return edgeGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        case "edges":
            return edgesGenerator.generateRequestTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString,
            });
        default:
            throw new Error(
                `Can't generate resolver request template, unknown type: ${resolverType}`,
            );
    }
}

/**
 * Generate DynamoDB response template
 * @param options
 */
function generateResponseTemplate({
    field,
    fieldName,
    fieldType,
    namedType,
    dataSource,
    resolverType,
    edges,
    headerString,
}: {
    field: string;
    fieldName: string;
    namedType: string;
    fieldType: GraphQLField<any, any, any>;
    dataSource: DataSourceTemplate;
    resolverType: string;
    edges: Edge[];
    headerString: string;
}): string {
    // Add error handling to the repsonse templates
    const header: string = `${headerString}

#if ($ctx.error)
    $util.appendError($ctx.error.message, $ctx.error.type, null, $ctx.result.data.unprocessedKeys)
#end
`;
    switch (resolverType) {
        // [ Query ]--------------------------------------------------------------------------------
        case "query":
            return queryGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        case "connection":
            return connectionGenerator.generateResponseTemplate({
                field,
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        case "connectionPlural":
            return connectionPluralGenerator.generateResponseTemplate({
                field,
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        case "plural":
            return pluralGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        // [ Mutation ]-----------------------------------------------------------------------------
        // case "upsert":
        //     return upsertGenerator.generateResponseTemplate({
        //         fieldName,
        //         fieldType,
        //         namedType,
        //         dataSource,
        //         resolverType,
        //         edges,
        //         headerString: header,
        //     });
        case "update":
            return updateGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        case "updateMany":
            return updateManyGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        case "delete":
            return deleteGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        case "deleteMany":
            return deleteManyGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        // [ Other ]--------------------------------------------------------------------------------
        case "edge":
            return edgeGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        case "edges":
            return edgesGenerator.generateResponseTemplate({
                fieldName,
                fieldType,
                namedType,
                dataSource,
                resolverType,
                edges,
                headerString: header,
            });
        default:
            throw new Error(
                `Can't generate resolver response template, unknown type: ${resolverType}`,
            );
    }
}

// [ Types ]----------------------------------------------------------------------------------------

enum DynamoDBResolverOptions {
    GetItem = "GetItem",
    PutItem = "PutItem",
    UpdateItem = "UpdateItem",
    DeleteItem = "DeleteItem",
    Query = "Query",
    Scan = "Scan",
}

export { generateDynamoDBResolverTemplate };
