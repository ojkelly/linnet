import {
    parse,
    visit,
    visitWithTypeInfo,
    printSchema,
    DirectiveNode,
    typeFromAST,
    buildSchema,
    isType,
    isInputType,
    DocumentNode,
    ObjectTypeDefinitionNode,
    GraphQLSchema,
    GraphQLFieldConfig,
    GraphQLNamedType,
    GraphQLObjectType,
    GraphQLInputObjectType,
    GraphQLString,
    GraphQLList,
    GraphQLInt,
    GraphQLID,
    GraphQLNonNull,
    OperationDefinitionNode,
    TypeInfo,
    GraphQLDirective,
    GraphQLType,
    FieldDefinitionNode,
    subscribe,
    NonNullTypeNode,
} from "graphql";
import { mergeAst, mergeStrings } from "gql-merge";
import { formatString, formatAst } from "gql-format";
import * as pluralize from "pluralize";
import { directives } from "../../../../util/directives";
import { Config } from "../../../../../common/types";

import { getFieldsForInputType, mutationType } from "./getFieldsForInputType";
import { Edge } from "../extractEdges";
/**
 * Create all the input types for a Type
 * and store them on the newInputTypes object
 * @param options
 */
function createInputTypes({
    node,
    type,
    newInputTypes,
    edges,
}: {
    node: ObjectTypeDefinitionNode;
    type: GraphQLType;
    newInputTypes: any;
    edges: Edge[];
}) {
    // TODO: add directive to prevent generation of 'many' types (to prevent Query.users)
    // [ inputTypes ]-------------------------------------------------------------------------------
    const createInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: `${node.name.value}Create`,
        fields: () => {
            const fields = getFieldsForInputType({
                type,
                node,
                newInputTypes,
                mutation: mutationType.CREATE,
                edges,
            });

            // We need to remove the ID field from create type, as it's autogenerated
            delete fields.id;

            return {
                ...fields,
            };
        },
    });
    newInputTypes[`${node.name.value}Create`] = createInputType;

    const updateInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: `${node.name.value}Update`,
        fields: () => {
            const fields = getFieldsForInputType({
                type,
                node,
                newInputTypes,
                mutation: mutationType.UPDATE,
                edges,
            });
            return {
                ...fields,
            };
        },
    });
    newInputTypes[`${node.name.value}Update`] = updateInputType;

    const whereUniqueType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: `${node.name.value}WhereUnique`,
        fields: () => ({
            id: { type: new GraphQLNonNull(GraphQLID) },
        }),
    });
    newInputTypes[`${node.name.value}WhereUnique`] = whereUniqueType;

    const whereType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: `${node.name.value}Where`,
        fields: () => ({
            ids: { type: new GraphQLList(GraphQLID) },
        }),
    });
    newInputTypes[`${node.name.value}Where`] = whereType;
}
export { createInputTypes };
