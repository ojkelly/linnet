import {
  ObjectTypeDefinitionNode,
  GraphQLInputObjectType,
  GraphQLList,
  GraphQLID,
  GraphQLNonNull,
  GraphQLType,
} from "graphql";

import { getFieldsForInputType, mutationType } from "./getFieldsForInputType";
import { getFieldsForFilterInputType } from "./getFieldsForFilterInputType";
import { Edge } from "../extractEdges";
/**
 * Create all the input types for a Type
 * and store them on the newInputTypes object
 * @param options
 */
function createInputTypes({
  node,
  type,
  newInputTypes,
  edges,
}: {
  node: ObjectTypeDefinitionNode;
  type: GraphQLType;
  newInputTypes: any;
  edges: Edge[];
}) {
  // [ data ]---------------------------------------------------------------------------------------
  const dataInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
    name: `${node.name.value}Data`,
    fields: () => {
      const fields = getFieldsForInputType({
        type,
        node,
        newInputTypes,
        mutation: mutationType.CREATE,
        edges,
      });

      // We need to remove the ID field from data type, as it's autogenerated, or provided
      // by the where type
      delete fields.id;

      return {
        ...fields,
      };
    },
  });
  newInputTypes[`${node.name.value}Data`] = dataInputType;

  // [ where ]--------------------------------------------------------------------------------------
  const whereUniqueType: GraphQLInputObjectType = new GraphQLInputObjectType({
    name: `${node.name.value}WhereUnique`,
    fields: () => ({
      id: { type: new GraphQLNonNull(GraphQLID) },
    }),
  });
  newInputTypes[`${node.name.value}WhereUnique`] = whereUniqueType;

  const whereType: GraphQLInputObjectType = new GraphQLInputObjectType({
    name: `${node.name.value}Where`,
    fields: () => ({
      ids: { type: new GraphQLList(GraphQLID) },
    }),
  });
  newInputTypes[`${node.name.value}Where`] = whereType;

  // [ filter ]-------------------------------------------------------------------------------------
  // This doesn't work yet :(
  // Maybe try add the edge id's to another indexed field on the node
  // We need to be able to run Query on all the edge connected nodes
  // Instead of creating a seperate item for the edge, add it to the node type and index the field
  // then query with contains
  // okay this may work with edges being stored as a stringset of id's prepended with the edgeName

  const filterType: GraphQLInputObjectType = new GraphQLInputObjectType({
    name: `${node.name.value}Filter`,
    fields: () => {
      const fields = getFieldsForFilterInputType({
        type,
        node,
        newInputTypes,
        edges,
      });

      return {
        ...fields,
      };
    },
  });
  newInputTypes[`${node.name.value}Filter`] = filterType;
}
export { createInputTypes };
