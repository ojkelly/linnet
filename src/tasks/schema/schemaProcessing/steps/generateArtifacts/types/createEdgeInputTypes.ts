import {
  ObjectTypeDefinitionNode,
  GraphQLObjectType,
  getNamedType,
  GraphQLInputObjectType,
  GraphQLType,
} from "graphql";

import { Edge } from "../extractEdges";
import { getFieldsForInputType, mutationType } from "./getFieldsForInputType";
import { capitalizeFirstLetter } from "../../../../util/capitalise";
/**
 * Create an Edge input type, without the root type
 * ie find the field that is the edges parent type, and
 * generate a type without that.
 * @param options
 */
function createEdgeInputTypes({
  node,
  type,
  newInputTypes,
  edges,
}: {
  node: ObjectTypeDefinitionNode;
  type: GraphQLType;
  newInputTypes: any;
  edges: Edge[];
}) {
  const typeFields = (type as GraphQLObjectType).getFields();

  // Search each field for an edge
  Object.keys(typeFields).forEach(typeFieldKey => {
    const subType = typeFields[typeFieldKey].type;

    const edge = edges.find((edge: Edge) => {
      if (edge.typeName === node.name.value && edge.field === typeFieldKey) {
        return true;
      }
      return false;
    });

    if (typeof edge !== "undefined") {
      const createInputName = `${
        edge.typeName
      }CreateWithout${capitalizeFirstLetter(typeFieldKey)}`;

      const updateInputName = `${
        edge.typeName
      }UpdateWithout${capitalizeFirstLetter(typeFieldKey)}`;

      // [ inputTypes ]-------------------------------------------------------------------------------
      if (typeof newInputTypes[createInputName] === "undefined") {
        const createInputType: GraphQLInputObjectType = new GraphQLInputObjectType(
          {
            name: createInputName,
            fields: () => {
              const fields = getFieldsForInputType({
                type,
                node,
                newInputTypes,
                mutation: mutationType.CREATE,
                hideField: edge.field,
                edges,
              });
              // We need to remove the ID field from create type, as it's autogenerated
              delete fields.id;
              return {
                ...fields,
              };
            },
          },
        );
        newInputTypes[createInputName] = createInputType;
      }

      if (typeof newInputTypes[updateInputName] === "undefined") {
        const updateInputType: GraphQLInputObjectType = new GraphQLInputObjectType(
          {
            name: updateInputName,
            fields: () => {
              const fields = getFieldsForInputType({
                type,
                node,
                newInputTypes,
                mutation: mutationType.UPDATE,
                hideField: edge.field,
                edges,
              });
              return {
                ...fields,
              };
            },
          },
        );
        newInputTypes[updateInputName] = updateInputType;
      }
    }
  });
}
export { createEdgeInputTypes };
